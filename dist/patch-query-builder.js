"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patchSelectQueryBuilder = void 0;

var _typeorm = require("typeorm");

const GET_QUERY_COPY = "___scope_getQuery_copy___";

class SelectQB extends _typeorm.SelectQueryBuilder {
  getQuery() {
    this.___patchScopes___();

    return this[GET_QUERY_COPY]();
  }

  ___patchScopes___() {
    for (const table of this.expressionMap.aliases) {
      if (!table || !table.hasMetadata) continue;
      const metadata = table.metadata.tableMetadataArgs;

      if (metadata.scopes && metadata.scopesEnabled) {
        for (const scope of metadata.scopes) scope(this, table.name);
      } else if (metadata.scopesEnabled === false) {
        metadata.scopesEnabled = true;
      }
    }
  }

}

class UpdateQB extends _typeorm.UpdateQueryBuilder {
  getQuery() {
    this.___patchScopes___();

    return this[GET_QUERY_COPY]();
  }

  ___patchScopes___() {
    for (const table of this.expressionMap.aliases) {
      if (!table || !table.hasMetadata) continue;
      const metadata = table.metadata.tableMetadataArgs;

      if (metadata.scopes && metadata.scopesEnabled) {
        for (const scope of metadata.scopes) scope(this, table.name);
      } else if (metadata.scopesEnabled === false) {
        metadata.scopesEnabled = true;
      }
    }
  }

}

class DeleteQB extends _typeorm.DeleteQueryBuilder {
  getQuery() {
    this.___patchScopes___();

    return this[GET_QUERY_COPY]();
  }

  ___patchScopes___() {
    for (const table of this.expressionMap.aliases) {
      if (!table || !table.hasMetadata) continue;
      const metadata = table.metadata.tableMetadataArgs;

      if (metadata.scopes && metadata.scopesEnabled) {
        for (const scope of metadata.scopes) scope(this, table.name);
      } else if (metadata.scopesEnabled === false) {
        metadata.scopesEnabled = true;
      }
    }
  }

}

const patchSelectQueryBuilder = () => {
  _typeorm.SelectQueryBuilder.prototype[GET_QUERY_COPY] = _typeorm.SelectQueryBuilder.prototype.getQuery;

  for (const property of Object.getOwnPropertyNames(SelectQB.prototype)) {
    Object.defineProperty(_typeorm.SelectQueryBuilder.prototype, property, Object.getOwnPropertyDescriptor(SelectQB.prototype, property));
  }

  _typeorm.UpdateQueryBuilder.prototype[GET_QUERY_COPY] = _typeorm.UpdateQueryBuilder.prototype.getQuery;

  for (const property of Object.getOwnPropertyNames(UpdateQB.prototype)) {
    Object.defineProperty(_typeorm.UpdateQueryBuilder.prototype, property, Object.getOwnPropertyDescriptor(UpdateQB.prototype, property));
  }

  _typeorm.DeleteQueryBuilder.prototype[GET_QUERY_COPY] = _typeorm.DeleteQueryBuilder.prototype.getQuery;

  for (const property of Object.getOwnPropertyNames(DeleteQB.prototype)) {
    Object.defineProperty(_typeorm.DeleteQueryBuilder.prototype, property, Object.getOwnPropertyDescriptor(DeleteQB.prototype, property));
  }
};

exports.patchSelectQueryBuilder = patchSelectQueryBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,